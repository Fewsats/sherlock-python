[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sherlock Domains Python SDK",
    "section": "",
    "text": "Install latest from the GitHub repository:\n$ pip install git+https://github.com/Fewsats/sherlock-python.git\n$ pip install sherlock-domains",
    "crumbs": [
      "Sherlock Domains Python SDK"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Sherlock Domains Python SDK",
    "section": "How to use",
    "text": "How to use\nCreate a Sherlock instance with a private key for the agent to use. If no key is provided, a new one will be generated and saved to the default config file.\n\ns = Sherlock()\ns\n\nSherlock(pubkey=90ba884688884277e49080712f386eebc88806efa8345ca937f75fe80950156d)\n\n\nYou can search for a domain and request to purchase it. Purchasing a domain requires contact information as mandated by ICANN.\n\nsr = s.search(\"trakwiska.com\")\n# Don't print the whole lists\nsr['available'] = sr['available'][:1]\nsr['unavailable'] = sr['unavailable'][:1]\nsr\n\n{'id': '812125a5-1358-4eaf-8589-c50248e3d4af',\n 'created_at': '2025-01-14T03:36:38.352Z',\n 'available': [{'name': 'trakwiska.com',\n   'tld': 'com',\n   'tags': [],\n   'price': 1105,\n   'currency': 'USD',\n   'available': True}],\n 'unavailable': []}\n\n\nContact information is needed for registering a new domain with the ICANN.\n\nc = Contact(**{\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"email\": \"test@example.com\",\n    \"address\": \"123 Test St\",\n    \"city\": \"Test City\",\n    \"state\": \"CA\",\n    \"country\": \"US\",\n    \"postal_code\": \"12345\",\n})\n\ns.set_contact_information(\n    cfn=c.first_name,\n    cln=c.last_name,\n    cem=c.email,\n    cadd=c.address,\n    cct=c.city,\n    cst=c.state,\n    cpc=c.postal_code,\n    ccn=c.country\n)\n\n{'message': 'Contact information updated successfully'}\n\n\nFinalizing a purchase involves a payment. Sherlock Domains currently supports two payment methods: Credit Card (credit_card) and the Lightning Netowrk (lightning). By default the credit card method is used. In order to complete the payment: - credit_card returns a checkout URL. - lightning returns a lightning invoice.\n\ns.request_payment_details(sr['id'], \"trakwiska.com\")\n\n{'payment_method': {'checkout_url': 'https://checkout.stripe.com/c/pay/cs_live_a1uu7dX1qtgk5YH3BdJewKlRPCujUfcW0KdBWr8WLwXCuctBQkWMdE2UQx#fidkdWxOYHwnPyd1blppbHNgWjA0S3VzXDdBbTFNVlJzfDVRQVQ2dVdBTnJTSH1QMGs2dHRsanJMbkY0PTxKbUtRaWowT2NwMGM8RlVBbGRqSWo3UFYwcVdqR3F9N2BtM2ZTPXc1Z3dQXGc2NTVPYVVSQkM8bycpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl',\n  'lightning_invoice': None},\n 'expires_at': '2025-01-14T04:06:39.531Z'}\n\n\nYou can now use the checkout URL to complete the purchase and the domain will be registered to your agent.\nYou can view the domains you own with:\n\ns.domains()\n\n[{'id': 'd9b2cc30-c15d-44b9-9d39-5d33da504484',\n  'domain_name': 'h402.org',\n  'created_at': '2024-12-28T18:58:49.899Z',\n  'expires_at': '2024-12-31T18:58:42Z',\n  'auto_renew': False,\n  'locked': True,\n  'private': True,\n  'nameservers': [],\n  'status': 'active'}]\n\n\nBelow is a list of all the tools that the client offers to manage the domains and purchases.\n\ns.as_tools().map(lambda t: t.__name__)\n\n(#10) ['_me','_set_contact_information','_get_contact_information','_search','_request_payment_details','_domains','_dns_records','_create_dns_record','_update_dns_record','_delete_dns_record']",
    "crumbs": [
      "Sherlock Domains Python SDK"
    ]
  },
  {
    "objectID": "index.html#ai-agents",
    "href": "index.html#ai-agents",
    "title": "Sherlock Domains Python SDK",
    "section": "AI agents",
    "text": "AI agents\nWe will show how to enable your AI assistant to handle payments using Claudette, Answer.ai convenient wrapper for Claude. You’ll need to export your ANTHROPIC_API_KEY.\n\nfrom claudette import Chat, models\n\n\nmodel = models[1]; model\n\n'claude-3-5-sonnet-20240620'\n\n\nCreate a Sherlock instance with a public & private key for the agent to use.\nSherlock supports returning all the tools with s.as_tools().\n\nsp = 'You are a helpful assistant that has access to a domain purchase API.'\nchat = Chat(model, sp=sp, tools=s.as_tools())\n\npr = f\"Search if domain 'the-favourite-game.com' is available? If it is request a purchase and process the payment using credit card method.\"\nr = chat.toolloop(pr, trace_func=print)\nr\n\nMessage(id='msg_014pq4tF62joNFyY7HK6a197', content=[TextBlock(text=\"Certainly! I'll search for the domain 'the-favourite-game.com' and if it's available, I'll proceed with the purchase request using the credit card payment method. Let's start with the search.\", type='text'), ToolUseBlock(id='toolu_01P6nMob3NuohiyNYDvYjmde', input={'q': 'the-favourite-game.com'}, name='_search', type='tool_use')], model='claude-3-5-sonnet-20240620', role='assistant', stop_reason='tool_use', stop_sequence=None, type='message', usage=In: 2409; Out: 104; Cache create: 0; Cache read: 0; Total: 2513)\nMessage(id='msg_01NcViW2skMwxQFMFMKr3g5n', content=[TextBlock(text=\"Great news! The domain 'the-favourite-game.com' is available. The search results show that it can be purchased for 1105 cents USD, which is equivalent to $11.05.\\n\\nNow that we know the domain is available, let's proceed with the purchase request using the credit card payment method. However, before we can do that, we need to make sure that the contact information is set up. Let's check the current contact information:\", type='text'), ToolUseBlock(id='toolu_01MJeNVC2FJa82EbyiLS5ase', input={}, name='_get_contact_information', type='tool_use')], model='claude-3-5-sonnet-20240620', role='assistant', stop_reason='tool_use', stop_sequence=None, type='message', usage=In: 2640; Out: 137; Cache create: 0; Cache read: 0; Total: 2777)\nMessage(id='msg_01L7iWs1P4xgcBDXWU2MDCPj', content=[TextBlock(text='It looks like the contact information is already set up. Now we can proceed with the purchase request:', type='text'), ToolUseBlock(id='toolu_01V8SvLHszxREU7AEXtLYHJW', input={'sid': 'a63c4bd6-d3c0-4bcd-a381-2ace4ab5dbfe', 'domain': 'the-favourite-game.com', 'payment_method': 'credit_card'}, name='_request_payment_details', type='tool_use')], model='claude-3-5-sonnet-20240620', role='assistant', stop_reason='tool_use', stop_sequence=None, type='message', usage=In: 2864; Out: 144; Cache create: 0; Cache read: 0; Total: 3008)\nMessage(id='msg_01TodMupqc2jGtgHzKnz4d1J', content=[TextBlock(text=\"Great! The purchase request has been processed successfully. Here's a summary of what happened:\\n\\n1. We searched for the domain 'the-favourite-game.com' and found it was available for $11.05.\\n2. We confirmed that the contact information was already set up.\\n3. We submitted a purchase request for the domain using the credit card payment method.\\n\\nThe system has provided a checkout URL for you to complete the payment. To finalize the purchase, you'll need to visit this URL:\\n\\nhttps://checkout.stripe.com/c/pay/cs_live_a1o69y0arBV5CHaLPQ4lusmVfLqGJDjAkyhNeTVT89Ri3LBbjQQjE3iuT8#fidkdWxOYHwnPyd1blppbHNgWjA0S3VzXDdBbTFNVlJzfDVRQVQ2dVdBTnJTSH1QMGs2dHRsanJMbkY0PTxKbUtRaWowT2NwMGM8RlVBbGRqSWo3UFYwcVdqR3F9N2BtM2ZTPXc1Z3dQXGc2NTVPYVVSQkM8bycpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\\n\\nPlease note that this checkout URL will expire on 2025-01-14T04:06:49.681Z. Make sure to complete the payment before this time to secure your domain.\\n\\nIs there anything else you'd like me to help you with regarding this domain purchase or any other domain-related tasks?\", type='text')], model='claude-3-5-sonnet-20240620', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=In: 3361; Out: 477; Cache create: 0; Cache read: 0; Total: 3838)\n\n\nGreat! The purchase request has been processed successfully. Here’s a summary of what happened:\n\nWe searched for the domain ‘the-favourite-game.com’ and found it was available for $11.05.\nWe confirmed that the contact information was already set up.\nWe submitted a purchase request for the domain using the credit card payment method.\n\nThe system has provided a checkout URL for you to complete the payment. To finalize the purchase, you’ll need to visit this URL:\nhttps://checkout.stripe.com/c/pay/cs_live_a1o69y0arBV5CHaLPQ4lusmVfLqGJDjAkyhNeTVT89Ri3LBbjQQjE3iuT8#fidkdWxOYHwnPyd1blppbHNgWjA0S3VzXDdBbTFNVlJzfDVRQVQ2dVdBTnJTSH1QMGs2dHRsanJMbkY0PTxKbUtRaWowT2NwMGM8RlVBbGRqSWo3UFYwcVdqR3F9N2BtM2ZTPXc1Z3dQXGc2NTVPYVVSQkM8bycpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\nPlease note that this checkout URL will expire on 2025-01-14T04:06:49.681Z. Make sure to complete the payment before this time to secure your domain.\nIs there anything else you’d like me to help you with regarding this domain purchase or any other domain-related tasks?\n\n\nid: msg_01TodMupqc2jGtgHzKnz4d1J\ncontent: [{'text': \"Great! The purchase request has been processed successfully. Here's a summary of what happened:\\n\\n1. We searched for the domain 'the-favourite-game.com' and found it was available for $11.05.\\n2. We confirmed that the contact information was already set up.\\n3. We submitted a purchase request for the domain using the credit card payment method.\\n\\nThe system has provided a checkout URL for you to complete the payment. To finalize the purchase, you'll need to visit this URL:\\n\\nhttps://checkout.stripe.com/c/pay/cs_live_a1o69y0arBV5CHaLPQ4lusmVfLqGJDjAkyhNeTVT89Ri3LBbjQQjE3iuT8#fidkdWxOYHwnPyd1blppbHNgWjA0S3VzXDdBbTFNVlJzfDVRQVQ2dVdBTnJTSH1QMGs2dHRsanJMbkY0PTxKbUtRaWowT2NwMGM8RlVBbGRqSWo3UFYwcVdqR3F9N2BtM2ZTPXc1Z3dQXGc2NTVPYVVSQkM8bycpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl\\n\\nPlease note that this checkout URL will expire on 2025-01-14T04:06:49.681Z. Make sure to complete the payment before this time to secure your domain.\\n\\nIs there anything else you'd like me to help you with regarding this domain purchase or any other domain-related tasks?\", 'type': 'text'}]\nmodel: claude-3-5-sonnet-20240620\nrole: assistant\nstop_reason: end_turn\nstop_sequence: None\ntype: message\nusage: {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 3361, 'output_tokens': 477}",
    "crumbs": [
      "Sherlock Domains Python SDK"
    ]
  },
  {
    "objectID": "crypto.html",
    "href": "crypto.html",
    "title": "crypto",
    "section": "",
    "text": "Generating a private & public key pair from scratch.\n\npk = ed25519.Ed25519PrivateKey.generate()\npk\n\n&lt;cryptography.hazmat.bindings._rust.openssl.ed25519.Ed25519PrivateKey&gt;\n\n\n\npub = pk.public_key().public_bytes_raw().hex()\npk, pub\n\n(&lt;cryptography.hazmat.bindings._rust.openssl.ed25519.Ed25519PrivateKey&gt;,\n '25e06ab46f49f96c3a45b3a10a86d53362199cd32d7d7696c4ef08e678f2086e')\n\n\n\nsource\n\ngenerate_keys\n\n generate_keys ()\n\n\ngenerate_keys()\n\n(&lt;cryptography.hazmat.bindings._rust.openssl.ed25519.Ed25519PrivateKey&gt;,\n '3abc35f7819d7edec58658199c0116a1eabdd6b0f91a096298b8dcbb0ab581f5')\n\n\nGenerating a pk instance and a public key from a private key in hex.\n\npriv = pk.private_bytes_raw().hex()\npk = ed25519.Ed25519PrivateKey.from_private_bytes(bytes.fromhex(priv))\npk.public_key().public_bytes_raw().hex()\n\n'25e06ab46f49f96c3a45b3a10a86d53362199cd32d7d7696c4ef08e678f2086e'\n\n\n\nsource\n\n\npriv_key_hex\n\n priv_key_hex (pk)\n\n\nsource\n\n\nfrom_pk_hex\n\n from_pk_hex (priv)\n\n\nfrom_pk_hex(priv)\n\n(&lt;cryptography.hazmat.bindings._rust.openssl.ed25519.Ed25519PrivateKey&gt;,\n '25e06ab46f49f96c3a45b3a10a86d53362199cd32d7d7696c4ef08e678f2086e')",
    "crumbs": [
      "crypto"
    ]
  },
  {
    "objectID": "config.html",
    "href": "config.html",
    "title": "config",
    "section": "",
    "text": "source\n\nSherlockConfig\n\n SherlockConfig (priv:str='')\n\n\nsource\n\n\nsave_cfg\n\n save_cfg (cfg:dict, path=None)\n\nSave config to file\n\nsource\n\n\nget_cfg\n\n get_cfg (path=None)\n\nGet config from XDG config dir, creating if needed\n\ntest_dir = 'tmp_test'\ncfg_path = Path(test_dir)/'sherlock.conf'\ncfg_path\n\nPath('tmp_test/sherlock.conf')\n\n\n\nget_cfg(path=cfg_path)\n\n{'priv': ''}\n\n\n\nsave_cfg({'priv': '912j3i9x...'}, cfg_path)\nget_cfg(path=cfg_path)\n\n{'priv': '912j3i9x...'}\n\n\n\nshutil.rmtree(test_dir)",
    "crumbs": [
      "config"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "This is the main class for the SDK. If a private key is not provided, we will try to load it from the config file. If neither the private key nor the config file is provided, we will generate a new one and store it in the config file.\n\nsource",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#api-methods",
    "href": "core.html#api-methods",
    "title": "core",
    "section": "API methods",
    "text": "API methods\n\nClaim account\nAccounts created by AI Agents can link an email. After confirming the account users will be able log in and use the web interface for Sherlock Domains.\nAn email cannot be claimed more than once.\n\nsource\n\n\nSherlock.claim_account\n\n Sherlock.claim_account (email:str)\n\nClaim an account by linking an email address\n\n\nSearch domains\nSearch domains returns domain availability and its prices in USD cents.\n\nsource\n\n\nSherlock.search\n\n Sherlock.search (q:str)\n\nSearch for domains with a query. Returns prices in USD cents.\n\n\n\n\nType\nDetails\n\n\n\n\nq\nstr\nquery\n\n\n\n\nsr = s.search(\"trakwiska\")\n# Don't print the whole lists\nsr['available'] = sr['available'][:1]\nsr['unavailable'] = sr['unavailable'][:1]\nsr\n\n{'id': 'd1805b55-d448-4d1d-94ff-97e4e3e7642e',\n 'created_at': '2025-03-18T08:58:56.382Z',\n 'available': [{'name': 'trakwiska.net',\n   'tld': 'net',\n   'tags': [],\n   'price': 1185,\n   'currency': 'USD',\n   'available': True}],\n 'unavailable': []}\n\n\n\n\nContact Information\nContact information is required for ICANN domain registration and billing.\n\nsource\n\n\nContact\n\n Contact (first_name, last_name, email, address, city, state, postal_code,\n          country)\n\nContact information for a domain purchase\n\nsource\n\n\nSherlock.get_contact_information\n\n Sherlock.get_contact_information ()\n\nGet the contact information for the Sherlock user.\n\nsource\n\n\nSherlock.set_contact_information\n\n Sherlock.set_contact_information (cfn:str='', cln:str='', cem:str='',\n                                   cadd:str='', cct:str='', cst:str='',\n                                   cpc:str='', ccn:str='')\n\nSet the contact information for the Sherlock user\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncfn\nstr\n\ncontact first name\n\n\ncln\nstr\n\ncontact last name\n\n\ncem\nstr\n\ncontact email\n\n\ncadd\nstr\n\ncontact address\n\n\ncct\nstr\n\ncontact city\n\n\ncst\nstr\n\ncontact state\n\n\ncpc\nstr\n\ncontact postal code\n\n\nccn\nstr\n\ncontact country\n\n\n\n\nsource\n\n\nContact.is_valid\n\n Contact.is_valid ()\n\nCheck if the contact information is valid\n\ndata = {\n    \"name\": 'pol',\n    \"email\": 'pol@sherlockdomains.com',\n    \"address\": '123 Test St',\n    \"city\": 'Test City',\n    \"state\": 'CA',\n    \"postal_code\": '12345',\n    \"country\": 'US'\n}\nr = httpx.post(f\"{API_URL}/api/v0/users/contact-information\", json=data, headers=_mk_headers(s.atok))\nr, r.text\n\n(&lt;Response [422 Unprocessable Content]&gt;,\n '{\"detail\": [{\"type\": \"missing\", \"loc\": [\"body\", \"data\", \"first_name\"], \"msg\": \"Field required\"}, {\"type\": \"missing\", \"loc\": [\"body\", \"data\", \"last_name\"], \"msg\": \"Field required\"}]}')\n\n\n\ninfo = {\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"email\": \"test@example.com\",\n    \"address\": \"123 Test St\",\n    \"city\": \"Test City\",\n    \"state\": \"CA\",\n    \"country\": \"US\",\n    \"postal_code\": \"12345\",\n}  \n\nc = Contact(**info)\nc, c.is_valid()\n\n(Contact(first_name='Test', last_name='User', email='test@example.com', address='123 Test St', city='Test City', state='CA', postal_code='12345', country='US'),\n True)\n\n\n\nr = s.set_contact_information(\n    cfn=info['first_name'],\n    cln=info['last_name'],\n    cem=info['email'],\n    cadd=info['address'],\n    cct=info['city'],\n    cst=info['state'],\n    cpc=info['postal_code'],\n    ccn=info['country']\n)\nr\n\n{'message': 'Contact information updated successfully'}\n\n\n\nr = s.get_contact_information()\nr\n\n{'first_name': 'Test',\n 'last_name': 'User',\n 'address': '123 Test St',\n 'city': 'Test City',\n 'state': 'CA',\n 'postal_code': '12345',\n 'country': 'US',\n 'email': 'test@example.com'}\n\n\n\n\nPurchase a domain\nA purchase needs to be linked to a search id. The purchase flow implements the L402 protocol. The flow has two steps:\n\nGet available payment options for a domain\nGet payment details (checkout URL for credit card, invoice for Lightning Network) so it can be completed outband.\n\n\npd = _get_offers_payload(\"trakwiska.com\", c, sr['id'])\npd\n\n{'domain': 'trakwiska.com',\n 'contact_information': {'first_name': 'Test',\n  'last_name': 'User',\n  'email': 'test@example.com',\n  'address': '123 Test St',\n  'city': 'Test City',\n  'state': 'CA',\n  'postal_code': '12345',\n  'country': 'US'},\n 'search_id': 'd1805b55-d448-4d1d-94ff-97e4e3e7642e'}\n\n\n\nr = httpx.post(get_offers_endpoint, json=pd, headers=_mk_headers(s.atok))\nr, r.json()\n\n(&lt;Response [402 Payment Required]&gt;,\n {'version': '0.2.1',\n  'payment_request_url': 'https://api.sherlockdomains.com/api/v0/payments/l402/payment_request',\n  'payment_context_token': '90ba884688884277e49080712f386eebc88806efa8345ca937f75fe80950156d',\n  'offers': [{'id': 'c377d60a-af98-48fd-a258-70c22de2d95c',\n    'title': 'trakwiska.com',\n    'description': 'Purchase trakwiska.com for 11.05 USD',\n    'type': 'one-time',\n    'amount': 1105,\n    'currency': 'USD',\n    'payment_methods': ['credit_card', 'lightning']}]})\n\n\n\nsource\n\n\nSherlock.get_purchase_offers\n\n Sherlock.get_purchase_offers (sid:str, domain:str, c:__main__.Contact)\n\nRequest available payment options for a domain.\n\n\n\n\nType\nDetails\n\n\n\n\nsid\nstr\nsearch id\n\n\ndomain\nstr\ndomain\n\n\nc\nContact\ncontact information\n\n\n\nRequesting a purchase will return a list of available offers and payment methods.\n\nofs = s.get_purchase_offers(sr['id'], \"trakwiska.com\")\nofs\n\n{'version': '0.2.1',\n 'payment_request_url': 'https://api.sherlockdomains.com/api/v0/payments/l402/payment_request',\n 'payment_context_token': '90ba884688884277e49080712f386eebc88806efa8345ca937f75fe80950156d',\n 'offers': [{'id': '533f89b7-67fa-48fe-9517-5ae32ce89d65',\n   'title': 'trakwiska.com',\n   'description': 'Purchase trakwiska.com for 11.05 USD',\n   'type': 'one-time',\n   'amount': 1105,\n   'currency': 'USD',\n   'payment_methods': ['credit_card', 'lightning']}]}\n\n\nIn order to pay for the domain you will have to request the payment details of the offer you want to pay for.\n\ndata = {\n    \"offer_id\": first(ofs['offers'])['id'],\n    \"payment_method\": 'credit_card',\n    \"payment_context_token\": ofs['payment_context_token']\n}\nr = httpx.post(ofs['payment_request_url'], json=data)\nr, r.json()\n\n(&lt;Response [200 OK]&gt;,\n {'payment_method': {'checkout_url': 'https://checkout.stripe.com/c/pay/cs_live_a1Om85Efvv1lgfE8BbhUNibQyzwoEfG8qvKPeOVoSt5tv0wx2rxcgiKofV#fidkdWxOYHwnPyd1blppbHNgWjA0S3VzXDdBbTFNVlJzfDVRQVQ2dVdBTnJTSH1QMGs2dHRsanJMbkY0PTxKbUtRaWowT2NwMGM8RlVBbGRqSWo3UFYwcVdqR3F9N2BtM2ZTPXc1Z3dQXGc2NTVPYVVSQkM8bycpJ2N3amhWYHdzYHcnP3F3cGApJ2lkfGpwcVF8dWAnPyd2bGtiaWBabHFgaCcpJ2BrZGdpYFVpZGZgbWppYWB3dic%2FcXdwYHgl',\n   'lightning_invoice': None},\n  'expires_at': '2025-01-14T04:04:35.484Z'})\n\n\n\nsource\n\n\nSherlock.get_payment_details\n\n Sherlock.get_payment_details (prurl:str, oid:str, pm:str, pct:str)\n\nGet payment details for an offer.\n\n\n\n\nType\nDetails\n\n\n\n\nprurl\nstr\npayment request url\n\n\noid\nstr\noffer id\n\n\npm\nstr\npayment method\n\n\npct\nstr\npayment context token\n\n\n\n\nsource\n\n\nSherlock.request_payment_details\n\n Sherlock.request_payment_details (sid:str, domain:str,\n                                   payment_method:str='credit_card',\n                                   contact:__main__.Contact=None)\n\nRequest payment information for purchasing a domain. Returns the details needed to complete the payment (like a checkout URL).\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsid\nstr\n\nsearch id\n\n\ndomain\nstr\n\ndomain\n\n\npayment_method\nstr\ncredit_card\npayment method {‘credit_card’, ‘lightning’}\n\n\ncontact\nContact\nNone\ncontact information",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#dns-methods",
    "href": "core.html#dns-methods",
    "title": "core",
    "section": "DNS methods",
    "text": "DNS methods\n\nsource\n\nSherlock.domains\n\n Sherlock.domains ()\n\nList of domains owned by the authenticated user\n\nds = s.domains()\nds\n\n[{'id': 'd9b2cc30-c15d-44b9-9d39-5d33da504484',\n  'domain_name': 'h402.org',\n  'created_at': '2024-12-28T18:58:49.899Z',\n  'expires_at': '2024-12-31T18:58:42Z',\n  'auto_renew': False,\n  'locked': True,\n  'private': True,\n  'nameservers': [],\n  'status': 'active'}]\n\n\n\nsource\n\n\nSherlock.dns_records\n\n Sherlock.dns_records (domain_id:str)\n\nGet DNS records for a domain.\n\n\n\n\nType\nDetails\n\n\n\n\ndomain_id\nstr\ndomain id\n\n\n\n\ndid = first(ds)['id']\nrs = s.dns_records(did)\nrs\n\n{'domain': 'h402.org',\n 'records': [{'id': '8c1df0e3ad7ff4b30695a11e20d84b72',\n   'type': 'A',\n   'name': 'h402.org',\n   'value': '76.76.21.21',\n   'ttl': 3600}]}\n\n\n\nsource\n\n\nSherlock.create_dns\n\n Sherlock.create_dns (domain_id:str, type:str='TXT', name:str='test',\n                      value:str='test-1', ttl:int=3600)\n\nCreate a new DNS record\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndomain_id\nstr\n\ndomain id\n\n\ntype\nstr\nTXT\ntype\n\n\nname\nstr\ntest\nname\n\n\nvalue\nstr\ntest-1\nvalue\n\n\nttl\nint\n3600\nttl\n\n\n\n\nentry = s.create_dns(\n    domain_id=did,\n    type=\"TXT\",\n    name=\"test-sherlock\",  # This will create test-sherlock.yourdomain.com\n    value=\"hello-world\",   # The actual text content\n    ttl=3600              # Time to live in seconds\n)\n\ncreated_record_id = first(entry['records'])['id']\ncreated_record_id, entry\n\n('b22820c45b6f2a48461c3a52ca486b5a',\n {'domain': 'h402.org',\n  'records': [{'id': 'b22820c45b6f2a48461c3a52ca486b5a',\n    'type': 'TXT',\n    'name': 'test-sherlock',\n    'value': 'hello-world',\n    'ttl': 3600}]})\n\n\n\ns.dns_records(did)\n\n{'domain': 'h402.org',\n 'records': [{'id': '8c1df0e3ad7ff4b30695a11e20d84b72',\n   'type': 'A',\n   'name': 'h402.org',\n   'value': '76.76.21.21',\n   'ttl': 3600},\n  {'id': 'b22820c45b6f2a48461c3a52ca486b5a',\n   'type': 'TXT',\n   'name': 'test-sherlock.h402.org',\n   'value': 'hello-world',\n   'ttl': 3600}]}\n\n\n\nsource\n\n\nSherlock.update_dns\n\n Sherlock.update_dns (domain_id:str, record_id:str, type:str='TXT',\n                      name:str='test-2', value:str='test-2', ttl:int=3600)\n\nUpdate a DNS record\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndomain_id\nstr\n\ndomain id\n\n\nrecord_id\nstr\n\nrecord id\n\n\ntype\nstr\nTXT\ntype\n\n\nname\nstr\ntest-2\nname\n\n\nvalue\nstr\ntest-2\nvalue\n\n\nttl\nint\n3600\nttl\n\n\n\n\nupdated_record = s.update_dns(\n    domain_id=did,\n    record_id=entry['records'][0]['id'],\n    type=\"TXT\",\n    name=\"test-sherlock\",\n    value=\"hello-world-updated\",\n    ttl=3600\n)\nupdated_record_id = first(updated_record['records'])['id']\nupdated_record_id, updated_record\n\n('3944584c93667d49c774e7823a039cd8',\n {'domain': 'h402.org',\n  'records': [{'id': '3944584c93667d49c774e7823a039cd8',\n    'type': 'TXT',\n    'name': 'test-sherlock',\n    'value': 'hello-world-updated',\n    'ttl': 3600}]})\n\n\n\nsource\n\n\nSherlock.delete_dns\n\n Sherlock.delete_dns (domain_id:str, record_id:str)\n\nDelete a DNS record\n\n\n\n\nType\nDetails\n\n\n\n\ndomain_id\nstr\ndomain id\n\n\nrecord_id\nstr\nrecord id\n\n\n\n\ns.delete_dns(did, updated_record_id)\n\n{'domain': 'h402.org', 'deleted_records': ['3944584c93667d49c774e7823a039cd8']}\n\n\nWe expose Sherlock’s core functionality as tools for AI agents. Note that payment handling for L402 offers requires additional tools like fewsats.Client().pay.\n\nsource\n\n\nSherlock.as_tools\n\n Sherlock.as_tools ()\n\nReturn the Sherlock class as a list of tools ready for agents to use\n\ns.as_tools().map(lambda t: t.__name__)\n\n(#10) ['_me','_set_contact_information','_get_contact_information','_search','_purchase_domain','_domains','_dns_records','_create_dns_record','_update_dns_record','_delete_dns_record']",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#cli",
    "href": "core.html#cli",
    "title": "core",
    "section": "CLI",
    "text": "CLI\n\nsource\n\nSherlock.as_cli\n\n Sherlock.as_cli ()\n\nReturn the Sherlock class as a list of tools ready for agents to use\nYou can use the Sherlock class as a CLI tool.\n❯ sherlock\nusage: sherlock [-h] {me,set_contact_information,get_contact_information,search,purchase_domain,domains,dns_records,create_dns,update_dns,delete_dns} ...\n\npositional arguments:\n  {me,set_contact_information,get_contact_information,search,purchase_domain,domains,dns_records,create_dns,update_dns,delete_dns}\n    me                  Get authenticated user information\n    set_contact_information\n                        Set the contact information for the Sherlock user\n    get_contact_information\n                        Get the contact information for the Sherlock user.\n    search              Search for domains with a query. Returns prices in USD cents.\n    purchase_domain     Request payment information for purchasing a domain. Returns the details needed to complete the payment (like a checkout URL).\n    domains             List of domains owned by the authenticated user\n    dns_records         Get DNS records for a domain.\n    create_dns          Create a new DNS record\n    update_dns          Update a DNS record\n    delete_dns          Delete a DNS record\n\noptions:\n  -h, --help            show this help message and exit\n\nsource\n\n\nmain\n\n main ()\n\nCLI interface for Sherlock",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "auth.html",
    "href": "auth.html",
    "title": "auth",
    "section": "",
    "text": "The authentication system allows AI agents to authenticate without passwords or email verification.\nThe agent has a public/private key pair. To authenticate, the agent does:\n\nAgent sends their public key to the server which issues a one-time challenge tied to the public key\nAgent signs the challenge with their private key to prove identity\nServer verifies signature and issues JWT tokens for subsequent requests\n\nThis flow provides secure authentication while being simple for automated agents to implement.\n\n\n\npk, pub = from_pk_hex(priv)\n\n\nr = httpx.post(f\"{API_URL}/api/v0/auth/challenge\", json={\"public_key\": pub})\nr, r.json()\n\n(&lt;Response [200 OK]&gt;,\n {'challenge': '5189a91c74c77a55c1d567b52d04233a83040c9f398eee33657a912fbdb92dd8',\n  'expires_at': '2025-01-27T08:10:58.196Z'})\n\n\n\n\n\nWe next need to sign the challenge with the private key and send it back to the server.\n\nsig = pk.sign(bytes.fromhex(c)).hex()\nsig\n\n'5ed8287141ada59c29a51271706c48788909c7fea1fde7fca32431ebd043a3ebe5dcb77beb61bcab0b2a9389f157083dba7fa24bd25949069f776edc74c8b40c'\n\n\n\n\n\n\nr = httpx.post(f\"{API_URL}/api/v0/auth/login\", json={\n    \"public_key\": pub,\n    \"challenge\": c,\n    \"signature\": sig\n})\nr, r.json()\n\n(&lt;Response [200 OK]&gt;,\n {'access': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyOCwicHVibGljX2tleSI6IjkwYmE4ODQ2ODg4ODQyNzdlNDkwODA3MTJmMzg2ZWViYzg4ODA2ZWZhODM0NWNhOTM3Zjc1ZmU4MDk1MDE1NmQiLCJleHAiOjE3Mzc5NjY2NTgsImlhdCI6MTczNzk2NDg1OCwidHlwZSI6ImFjY2VzcyJ9.3wgQp1U1Kx8aapsSZzKtxqw5pBr8nZFKrk09__eCR1M',\n  'refresh': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyOCwicHVibGljX2tleSI6IjkwYmE4ODQ2ODg4ODQyNzdlNDkwODA3MTJmMzg2ZWViYzg4ODA2ZWZhODM0NWNhOTM3Zjc1ZmU4MDk1MDE1NmQiLCJleHAiOjE3Mzg1Njk2NTgsImlhdCI6MTczNzk2NDg1OCwidHlwZSI6InJlZnJlc2gifQ.tz72nufBq39ME_foQDsajEiYJafeg-Oc5-Sx5B1bRw0'})\n\n\nChallenges can be used only once.\n\n\n\nLet’s put it all together in an authenticate method.\n\nsource\n\n\n\n\n authenticate (priv:cryptography.hazmat.primitives.asymmetric.ed25519.Ed25\n               519PrivateKey,\n               base_url:str='https://api.sherlockdomains.com')\n\nAuthenticate with the server and return access and refresh tokens\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npriv\nEd25519PrivateKey\n\nprivate key\n\n\nbase_url\nstr\nhttps://api.sherlockdomains.com\nbase url\n\n\n\n\natok, rtok = authenticate(pk)\natok, rtok\n\n('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyOCwicHVibGljX2tleSI6IjkwYmE4ODQ2ODg4ODQyNzdlNDkwODA3MTJmMzg2ZWViYzg4ODA2ZWZhODM0NWNhOTM3Zjc1ZmU4MDk1MDE1NmQiLCJleHAiOjE3Mzc5NjY2NTksImlhdCI6MTczNzk2NDg1OSwidHlwZSI6ImFjY2VzcyJ9.IlDt1ZNG0PIAwaS2wyt88vBq_J0huLJUS2The_-K88M',\n 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyOCwicHVibGljX2tleSI6IjkwYmE4ODQ2ODg4ODQyNzdlNDkwODA3MTJmMzg2ZWViYzg4ODA2ZWZhODM0NWNhOTM3Zjc1ZmU4MDk1MDE1NmQiLCJleHAiOjE3Mzg1Njk2NTksImlhdCI6MTczNzk2NDg1OSwidHlwZSI6InJlZnJlc2gifQ.6WtLMOKVX9Yr6crt-NPDWElKTGB36gC69ABpHGJeg7o')\n\n\n\n\n\nWhen an AI agent first authenticates using its public/private key pair, our system automatically creates a user account associated with that agent.\nWhile this account is fully functional for agent operations through our API, accessing our web application through a browser requires an email address for login. By linking an email to your agent-created account, you’ll gain access to the web interface along with additional features and account management capabilities.\n\nsource\n\n\n\n\n link_account_to_email (email:str, auth_token:str,\n                        base_url:str='https://api.sherlockdomains.com')",
    "crumbs": [
      "auth"
    ]
  },
  {
    "objectID": "auth.html#authentication-flow",
    "href": "auth.html#authentication-flow",
    "title": "auth",
    "section": "",
    "text": "The authentication system allows AI agents to authenticate without passwords or email verification.\nThe agent has a public/private key pair. To authenticate, the agent does:\n\nAgent sends their public key to the server which issues a one-time challenge tied to the public key\nAgent signs the challenge with their private key to prove identity\nServer verifies signature and issues JWT tokens for subsequent requests\n\nThis flow provides secure authentication while being simple for automated agents to implement.\n\n\n\npk, pub = from_pk_hex(priv)\n\n\nr = httpx.post(f\"{API_URL}/api/v0/auth/challenge\", json={\"public_key\": pub})\nr, r.json()\n\n(&lt;Response [200 OK]&gt;,\n {'challenge': '5189a91c74c77a55c1d567b52d04233a83040c9f398eee33657a912fbdb92dd8',\n  'expires_at': '2025-01-27T08:10:58.196Z'})\n\n\n\n\n\nWe next need to sign the challenge with the private key and send it back to the server.\n\nsig = pk.sign(bytes.fromhex(c)).hex()\nsig\n\n'5ed8287141ada59c29a51271706c48788909c7fea1fde7fca32431ebd043a3ebe5dcb77beb61bcab0b2a9389f157083dba7fa24bd25949069f776edc74c8b40c'\n\n\n\n\n\n\nr = httpx.post(f\"{API_URL}/api/v0/auth/login\", json={\n    \"public_key\": pub,\n    \"challenge\": c,\n    \"signature\": sig\n})\nr, r.json()\n\n(&lt;Response [200 OK]&gt;,\n {'access': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyOCwicHVibGljX2tleSI6IjkwYmE4ODQ2ODg4ODQyNzdlNDkwODA3MTJmMzg2ZWViYzg4ODA2ZWZhODM0NWNhOTM3Zjc1ZmU4MDk1MDE1NmQiLCJleHAiOjE3Mzc5NjY2NTgsImlhdCI6MTczNzk2NDg1OCwidHlwZSI6ImFjY2VzcyJ9.3wgQp1U1Kx8aapsSZzKtxqw5pBr8nZFKrk09__eCR1M',\n  'refresh': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyOCwicHVibGljX2tleSI6IjkwYmE4ODQ2ODg4ODQyNzdlNDkwODA3MTJmMzg2ZWViYzg4ODA2ZWZhODM0NWNhOTM3Zjc1ZmU4MDk1MDE1NmQiLCJleHAiOjE3Mzg1Njk2NTgsImlhdCI6MTczNzk2NDg1OCwidHlwZSI6InJlZnJlc2gifQ.tz72nufBq39ME_foQDsajEiYJafeg-Oc5-Sx5B1bRw0'})\n\n\nChallenges can be used only once.\n\n\n\nLet’s put it all together in an authenticate method.\n\nsource\n\n\n\n\n authenticate (priv:cryptography.hazmat.primitives.asymmetric.ed25519.Ed25\n               519PrivateKey,\n               base_url:str='https://api.sherlockdomains.com')\n\nAuthenticate with the server and return access and refresh tokens\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npriv\nEd25519PrivateKey\n\nprivate key\n\n\nbase_url\nstr\nhttps://api.sherlockdomains.com\nbase url\n\n\n\n\natok, rtok = authenticate(pk)\natok, rtok\n\n('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyOCwicHVibGljX2tleSI6IjkwYmE4ODQ2ODg4ODQyNzdlNDkwODA3MTJmMzg2ZWViYzg4ODA2ZWZhODM0NWNhOTM3Zjc1ZmU4MDk1MDE1NmQiLCJleHAiOjE3Mzc5NjY2NTksImlhdCI6MTczNzk2NDg1OSwidHlwZSI6ImFjY2VzcyJ9.IlDt1ZNG0PIAwaS2wyt88vBq_J0huLJUS2The_-K88M',\n 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyOCwicHVibGljX2tleSI6IjkwYmE4ODQ2ODg4ODQyNzdlNDkwODA3MTJmMzg2ZWViYzg4ODA2ZWZhODM0NWNhOTM3Zjc1ZmU4MDk1MDE1NmQiLCJleHAiOjE3Mzg1Njk2NTksImlhdCI6MTczNzk2NDg1OSwidHlwZSI6InJlZnJlc2gifQ.6WtLMOKVX9Yr6crt-NPDWElKTGB36gC69ABpHGJeg7o')\n\n\n\n\n\nWhen an AI agent first authenticates using its public/private key pair, our system automatically creates a user account associated with that agent.\nWhile this account is fully functional for agent operations through our API, accessing our web application through a browser requires an email address for login. By linking an email to your agent-created account, you’ll gain access to the web interface along with additional features and account management capabilities.\n\nsource\n\n\n\n\n link_account_to_email (email:str, auth_token:str,\n                        base_url:str='https://api.sherlockdomains.com')",
    "crumbs": [
      "auth"
    ]
  }
]